// Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { UsersEntity } from "./db/Users.entity";
import { CardsEntity } from "./db/Cards.entity";
import { SetsEntity } from "./db/Sets.entity";
import { InventoryEntity } from "./db/Inventory.entity";
import { WishlistEntity } from "./db/Wishlist.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      CardsEntity,
      SetsEntity,
      InventoryEntity,
      WishlistEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        { userName: "userName 1", email: "email 1", id: 31 },
        { userName: "userName 2", email: "email 2", id: 100 },
        { userName: "userName 3", email: "email 3", id: 61 },
        { userName: "userName 4", email: "email 4", id: 73 },
        { userName: "userName 5", email: "email 5", id: 79 },
      ],
      Cards: [
        {
          cardName: "cardName 1",
          serial: "serial 1",
          type: "type 1",
          rarity: "rarity 1",
          condition: "condition 1",
          imageUrl: "imageUrl 1",
          set: 1,
          id: 22,
        },
        {
          cardName: "cardName 2",
          serial: "serial 2",
          type: "type 2",
          rarity: "rarity 2",
          condition: "condition 2",
          imageUrl: "imageUrl 2",
          set: 2,
          id: 12,
        },
        {
          cardName: "cardName 3",
          serial: "serial 3",
          type: "type 3",
          rarity: "rarity 3",
          condition: "condition 3",
          imageUrl: "imageUrl 3",
          set: 3,
          id: 23,
        },
        {
          cardName: "cardName 4",
          serial: "serial 4",
          type: "type 4",
          rarity: "rarity 4",
          condition: "condition 4",
          imageUrl: "imageUrl 4",
          set: 4,
          id: 61,
        },
        {
          cardName: "cardName 5",
          serial: "serial 5",
          type: "type 5",
          rarity: "rarity 5",
          condition: "condition 5",
          imageUrl: "imageUrl 5",
          set: 5,
          id: 23,
        },
      ],
      Sets: [
        {
          setName: "setName 1",
          releaseDate: "2023-04-30T20:32:44.842Z",
          totalCards: 1,
          id: 75,
        },
        {
          setName: "setName 2",
          releaseDate: "2023-12-20T05:44:18.398Z",
          totalCards: 2,
          id: 9,
        },
        {
          setName: "setName 3",
          releaseDate: "2024-08-01T15:36:21.248Z",
          totalCards: 3,
          id: 83,
        },
        {
          setName: "setName 4",
          releaseDate: "2023-10-05T07:48:55.948Z",
          totalCards: 4,
          id: 47,
        },
        {
          setName: "setName 5",
          releaseDate: "2024-11-02T06:55:32.138Z",
          totalCards: 5,
          id: 89,
        },
      ],
      Inventory: [
        { user: 1, card: 1, dateAdded: "2025-02-14T14:47:58.722Z", id: 69 },
        { user: 2, card: 2, dateAdded: "2024-01-23T12:17:49.789Z", id: 38 },
        { user: 3, card: 3, dateAdded: "2023-11-01T13:07:16.061Z", id: 60 },
        { user: 4, card: 4, dateAdded: "2023-10-12T07:15:11.419Z", id: 48 },
        { user: 5, card: 5, dateAdded: "2024-10-12T23:21:42.756Z", id: 38 },
      ],
      Wishlist: [
        { user: 1, card: 1, dateInserted: "2023-10-03T10:15:40.011Z", id: 94 },
        { user: 2, card: 2, dateInserted: "2023-07-01T22:16:07.104Z", id: 21 },
        { user: 3, card: 3, dateInserted: "2024-01-06T11:37:48.518Z", id: 98 },
        { user: 4, card: 4, dateInserted: "2023-07-06T15:04:06.191Z", id: 94 },
        { user: 5, card: 5, dateInserted: "2023-05-29T17:37:34.466Z", id: 25 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log("   Seeding database...");
      await this.SeedResource("UsersEntity", data.Users);
      await this.SeedResource("CardsEntity", data.Cards);
      await this.SeedResource("SetsEntity", data.Sets);
      await this.SeedResource("InventoryEntity", data.Inventory);
      await this.SeedResource("WishlistEntity", data.Wishlist);
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    } else {
      console.log("   Database seeded already!");
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log("   Seeding table " + resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}
