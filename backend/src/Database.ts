// Source code generated by AppGPT (www.appgpt.tech)

 //Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { UsersEntity } from "./db/Users.entity";
import { CardsEntity } from "./db/Cards.entity";
import { SetsEntity } from "./db/Sets.entity";
import { InventoryEntity } from "./db/Inventory.entity";
import { WishlistEntity } from "./db/Wishlist.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, UsersEntity, CardsEntity, SetsEntity, InventoryEntity, WishlistEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables


    await Database.Seed();
  }
  static async Seed() {
    let data: any = {"Users":[{"username":"username 1","email":"email 1","id":20},{"username":"username 2","email":"email 2","id":23},{"username":"username 3","email":"email 3","id":43},{"username":"username 4","email":"email 4","id":35},{"username":"username 5","email":"email 5","id":23}],"Cards":[{"cardname":"cardname 1","serial":"serial 1","type":"type 1","rarity":"rarity 1","condition":"condition 1","imageurl":"imageurl 1","set":1,"id":27},{"cardname":"cardname 2","serial":"serial 2","type":"type 2","rarity":"rarity 2","condition":"condition 2","imageurl":"imageurl 2","set":2,"id":88},{"cardname":"cardname 3","serial":"serial 3","type":"type 3","rarity":"rarity 3","condition":"condition 3","imageurl":"imageurl 3","set":3,"id":4},{"cardname":"cardname 4","serial":"serial 4","type":"type 4","rarity":"rarity 4","condition":"condition 4","imageurl":"imageurl 4","set":4,"id":34},{"cardname":"cardname 5","serial":"serial 5","type":"type 5","rarity":"rarity 5","condition":"condition 5","imageurl":"imageurl 5","set":5,"id":100}],"Sets":[{"setname":"setname 1","releasedate":"2024-01-01T23:14:01.276Z","totalcards":1,"id":61},{"setname":"setname 2","releasedate":"2024-04-21T14:24:28.552Z","totalcards":2,"id":61},{"setname":"setname 3","releasedate":"2023-06-17T13:25:38.016Z","totalcards":3,"id":17},{"setname":"setname 4","releasedate":"2023-03-14T02:17:22.542Z","totalcards":4,"id":67},{"setname":"setname 5","releasedate":"2024-08-02T20:32:53.982Z","totalcards":5,"id":2}],"Inventory":[{"user":1,"card":1,"dateadded":"2025-01-08T04:50:34.003Z","id":68},{"user":2,"card":2,"dateadded":"2023-07-21T21:18:50.404Z","id":41},{"user":3,"card":3,"dateadded":"2023-05-04T10:58:16.506Z","id":83},{"user":4,"card":4,"dateadded":"2023-06-27T20:31:42.543Z","id":92},{"user":5,"card":5,"dateadded":"2023-06-21T03:29:53.450Z","id":70}],"Wishlist":[{"user":1,"card":1,"dateinserted":"2023-12-22T11:38:57.936Z","id":91},{"user":2,"card":2,"dateinserted":"2024-09-29T09:20:36.967Z","id":31},{"user":3,"card":3,"dateinserted":"2024-02-22T22:41:01.243Z","id":91},{"user":4,"card":4,"dateinserted":"2024-07-09T01:28:22.917Z","id":65},{"user":5,"card":5,"dateinserted":"2024-06-21T08:48:57.426Z","id":93}]};
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true){
      console.log('   Seeding database...');
      await this.SeedResource("UsersEntity", data.Users);
await this.SeedResource("CardsEntity", data.Cards);
await this.SeedResource("SetsEntity", data.Sets);
await this.SeedResource("InventoryEntity", data.Inventory);
await this.SeedResource("WishlistEntity", data.Wishlist); 
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    }else{
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table '+resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}

