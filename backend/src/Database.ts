// Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { UsersEntity } from "./db/Users.entity";
import { CardsEntity } from "./db/Cards.entity";
import { SetsEntity } from "./db/Sets.entity";
import { InventoryEntity } from "./db/Inventory.entity";
import { WishlistEntity } from "./db/Wishlist.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      CardsEntity,
      SetsEntity,
      InventoryEntity,
      WishlistEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        { UserName: "Ash Ketchum", email: "ash@pokemonworld.com" },
        { UserName: "Brock", email: "brock@pokemonworld.com" },
        { UserName: "Misty", email: "misty@pokemonworld.com" },
      ],
      Cards: [
        {
          CardName: "Pikachu",
          serial: "001",
          type: "Electric",
          rarity: "Common",
          condition: "Mint",
          imageurl: "pikachu.com",
          set: "Base Set",
        },
        {
          CardName: "Charizard",
          serial: "002",
          type: "Fire",
          rarity: "Rare",
          condition: "Near Mint",
          imageurl: "charizard.com",
          set: "Evolution Set",
        },
        {
          CardName: "Blastoise",
          serial: "003",
          type: "Water",
          rarity: "Uncommon",
          condition: "Good",
          imageurl: "blastoise.com",
          set: "Fossil Set",
        },
      ],
      Sets: [
        { SetName: "Base Set", ReleaseDate: "1999-01-09", TotalCards: "102" },
        {
          SetName: "Evolution Set",
          ReleaseDate: "2016-11-02",
          TotalCards: "108",
        },
        { SetName: "Fossil Set", ReleaseDate: "1999-10-10", TotalCards: "62" },
      ],
      Inventory: [
        { user: "Ash Ketchum", card: "Pikachu", RecordedDate: "2021-01-01" },
        { user: "Brock", card: "Charizard", RecordedDate: "2021-02-01" },
        { user: "Misty", card: "Blastoise", RecordedDate: "2021-03-01" },
      ],
      Wishlist: [
        { user: "Ash Ketchum", card: "Charizard", InsertedDate: "2021-04-01" },
        { user: "Brock", card: "Blastoise", InsertedDate: "2021-05-01" },
        { user: "Misty", card: "Pikachu", InsertedDate: "2021-06-01" },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log("   Seeding database...");
      await this.SeedResource("UsersEntity", data.Users);
      await this.SeedResource("CardsEntity", data.Cards);
      await this.SeedResource("SetsEntity", data.Sets);
      await this.SeedResource("InventoryEntity", data.Inventory);
      await this.SeedResource("WishlistEntity", data.Wishlist);
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    } else {
      console.log("   Database seeded already!");
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log("   Seeding table " + resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}
