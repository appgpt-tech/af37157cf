// Source code generated by AppGPT (www.appgpt.tech)

 //Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { UsersEntity } from "./db/Users.entity";
import { CardsEntity } from "./db/Cards.entity";
import { SetsEntity } from "./db/Sets.entity";
import { InventoryEntity } from "./db/Inventory.entity";
import { WishlistEntity } from "./db/Wishlist.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, UsersEntity, CardsEntity, SetsEntity, InventoryEntity, WishlistEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables


    await Database.Seed();
  }
  static async Seed() {
    let data: any = {"Users":[{"UserName":"UserName 1","email":"email 1","id":73},{"UserName":"UserName 2","email":"email 2","id":85},{"UserName":"UserName 3","email":"email 3","id":37},{"UserName":"UserName 4","email":"email 4","id":10},{"UserName":"UserName 5","email":"email 5","id":70}],"Cards":[{"CardName":"CardName 1","serial":"serial 1","type":"type 1","rarity":"rarity 1","condition":"condition 1","imageurl":"imageurl 1","set":1,"id":71},{"CardName":"CardName 2","serial":"serial 2","type":"type 2","rarity":"rarity 2","condition":"condition 2","imageurl":"imageurl 2","set":2,"id":69},{"CardName":"CardName 3","serial":"serial 3","type":"type 3","rarity":"rarity 3","condition":"condition 3","imageurl":"imageurl 3","set":3,"id":44},{"CardName":"CardName 4","serial":"serial 4","type":"type 4","rarity":"rarity 4","condition":"condition 4","imageurl":"imageurl 4","set":4,"id":24},{"CardName":"CardName 5","serial":"serial 5","type":"type 5","rarity":"rarity 5","condition":"condition 5","imageurl":"imageurl 5","set":5,"id":76}],"Sets":[{"SetName":"SetName 1","ReleaseDate":"2024-09-04T06:08:39.360Z","TotalCards":1,"id":93},{"SetName":"SetName 2","ReleaseDate":"2024-02-09T23:07:52.667Z","TotalCards":2,"id":82},{"SetName":"SetName 3","ReleaseDate":"2024-03-19T23:06:54.985Z","TotalCards":3,"id":51},{"SetName":"SetName 4","ReleaseDate":"2024-09-11T18:39:52.938Z","TotalCards":4,"id":41},{"SetName":"SetName 5","ReleaseDate":"2024-05-19T01:26:40.385Z","TotalCards":5,"id":82}],"Inventory":[{"user":1,"card":1,"RecordedDate":"2024-09-22T05:02:58.876Z","id":54},{"user":2,"card":2,"RecordedDate":"2024-09-03T02:52:29.122Z","id":80},{"user":3,"card":3,"RecordedDate":"2024-05-08T02:36:54.248Z","id":89},{"user":4,"card":4,"RecordedDate":"2025-01-30T18:36:44.264Z","id":98},{"user":5,"card":5,"RecordedDate":"2024-01-19T17:15:53.133Z","id":54}],"Wishlist":[{"user":1,"card":1,"InsertedDate":"2024-02-17T23:52:59.971Z","id":14},{"user":2,"card":2,"InsertedDate":"2023-09-11T04:28:10.217Z","id":32},{"user":3,"card":3,"InsertedDate":"2024-08-25T05:27:24.914Z","id":93},{"user":4,"card":4,"InsertedDate":"2024-02-19T02:51:46.407Z","id":87},{"user":5,"card":5,"InsertedDate":"2024-09-05T19:57:31.801Z","id":39}]};
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true){
      console.log('   Seeding database...');
      await this.SeedResource("UsersEntity", data.Users);
await this.SeedResource("CardsEntity", data.Cards);
await this.SeedResource("SetsEntity", data.Sets);
await this.SeedResource("InventoryEntity", data.Inventory);
await this.SeedResource("WishlistEntity", data.Wishlist); 
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    }else{
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table '+resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}

