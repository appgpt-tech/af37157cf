// Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { usersEntity } from "./db/users.entity";
import { cardsEntity } from "./db/cards.entity";
import { setsEntity } from "./db/sets.entity";
import { inventoryEntity } from "./db/inventory.entity";
import { wishlistEntity } from "./db/wishlist.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      usersEntity,
      cardsEntity,
      setsEntity,
      inventoryEntity,
      wishlistEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      users: [
        { username: "ash123", email: "ash123@gmail.com" },
        { username: "misty456", email: "misty456@gmail.com" },
        { username: "brock789", email: "brock789@gmail.com" },
      ],
      cards: [
        {
          cardname: "Pikachu",
          serial: "001",
          type: "Electric",
          rarity: "Common",
          condition: "New",
          imageurl: "pikachu.jpg",
          set: "Base Set",
        },
        {
          cardname: "Charizard",
          serial: "002",
          type: "Fire",
          rarity: "Rare",
          condition: "Used",
          imageurl: "charizard.jpg",
          set: "Base Set",
        },
        {
          cardname: "Bulbasaur",
          serial: "003",
          type: "Grass",
          rarity: "Common",
          condition: "New",
          imageurl: "bulbasaur.jpg",
          set: "Base Set",
        },
      ],
      sets: [
        { setname: "Base Set", releasedate: "1999-01-09", totalcards: "102" },
        { setname: "Jungle", releasedate: "1999-06-16", totalcards: "64" },
        { setname: "Fossil", releasedate: "1999-10-10", totalcards: "62" },
      ],
      inventory: [
        { user: "ash123", card: "Pikachu", dateadded: "2022-01-01" },
        { user: "misty456", card: "Charizard", dateadded: "2022-01-15" },
        { user: "brock789", card: "Bulbasaur", dateadded: "2022-01-20" },
      ],
      wishlist: [
        { user: "ash123", card: "Charizard", inserteddate: "2022-01-10" },
        { user: "misty456", card: "Bulbasaur", inserteddate: "2022-01-16" },
        { user: "brock789", card: "Pikachu", inserteddate: "2022-01-21" },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log("   Seeding database...");
      await this.SeedResource("usersEntity", data.users);
      await this.SeedResource("cardsEntity", data.cards);
      await this.SeedResource("setsEntity", data.sets);
      await this.SeedResource("inventoryEntity", data.inventory);
      await this.SeedResource("wishlistEntity", data.wishlist);
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    } else {
      console.log("   Database seeded already!");
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log("   Seeding table " + resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}
