// Source code generated by AppGPT (www.appgpt.tech)

 //Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { UsersEntity } from "./db/Users.entity";
import { CustomersEntity } from "./db/Customers.entity";
import { WorkoutsEntity } from "./db/Workouts.entity";
import { NutritionEntity } from "./db/Nutrition.entity";
import { HealthMetricsEntity } from "./db/HealthMetrics.entity";
import { NotificationsEntity } from "./db/Notifications.entity";
import { SupportTicketsEntity } from "./db/SupportTickets.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, UsersEntity, CustomersEntity, WorkoutsEntity, NutritionEntity, HealthMetricsEntity, NotificationsEntity, SupportTicketsEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables


    await Database.Seed();
  }
  static async Seed() {
    let data: any = {"Users":[{"userId":1,"name":"name 1","email":"email 1","password":"password 1","role":"role 1","id":89},{"userId":2,"name":"name 2","email":"email 2","password":"password 2","role":"role 2","id":23},{"userId":3,"name":"name 3","email":"email 3","password":"password 3","role":"role 3","id":64},{"userId":4,"name":"name 4","email":"email 4","password":"password 4","role":"role 4","id":57},{"userId":5,"name":"name 5","email":"email 5","password":"password 5","role":"role 5","id":33}],"Customers":[{"customerId":1,"email":"email 1","password":"password 1","name":"name 1","age":1,"gender":"gender 1","weight":0.31,"height":0.44,"healthConditions":"healthConditions 1","goals":"goals 1","dietaryPreferences":"dietaryPreferences 1","billingAddress":"billingAddress 1","country":"country 1","phone":"phone 1","id":27},{"customerId":2,"email":"email 2","password":"password 2","name":"name 2","age":2,"gender":"gender 2","weight":0.36,"height":0.07,"healthConditions":"healthConditions 2","goals":"goals 2","dietaryPreferences":"dietaryPreferences 2","billingAddress":"billingAddress 2","country":"country 2","phone":"phone 2","id":66},{"customerId":3,"email":"email 3","password":"password 3","name":"name 3","age":3,"gender":"gender 3","weight":0.83,"height":0.17,"healthConditions":"healthConditions 3","goals":"goals 3","dietaryPreferences":"dietaryPreferences 3","billingAddress":"billingAddress 3","country":"country 3","phone":"phone 3","id":88},{"customerId":4,"email":"email 4","password":"password 4","name":"name 4","age":4,"gender":"gender 4","weight":0.3,"height":0.59,"healthConditions":"healthConditions 4","goals":"goals 4","dietaryPreferences":"dietaryPreferences 4","billingAddress":"billingAddress 4","country":"country 4","phone":"phone 4","id":10},{"customerId":5,"email":"email 5","password":"password 5","name":"name 5","age":5,"gender":"gender 5","weight":0.67,"height":0.22,"healthConditions":"healthConditions 5","goals":"goals 5","dietaryPreferences":"dietaryPreferences 5","billingAddress":"billingAddress 5","country":"country 5","phone":"phone 5","id":30}],"Workouts":[{"workoutId":1,"customerId":1,"type":"type 1","duration":0.51,"intensity":"intensity 1","caloriesBurned":0.46,"date":"2023-09-11T19:13:25.287Z","id":37},{"workoutId":2,"customerId":2,"type":"type 2","duration":0.6,"intensity":"intensity 2","caloriesBurned":0.84,"date":"2024-08-04T05:17:42.008Z","id":22},{"workoutId":3,"customerId":3,"type":"type 3","duration":0.01,"intensity":"intensity 3","caloriesBurned":0.8,"date":"2024-10-13T06:04:53.895Z","id":41},{"workoutId":4,"customerId":4,"type":"type 4","duration":0.68,"intensity":"intensity 4","caloriesBurned":1,"date":"2024-06-21T11:22:21.112Z","id":11},{"workoutId":5,"customerId":5,"type":"type 5","duration":0.69,"intensity":"intensity 5","caloriesBurned":0.49,"date":"2023-05-29T06:15:24.053Z","id":3}],"Nutrition":[{"mealId":1,"customerId":1,"foodItem":"foodItem 1","quantity":0.43,"calories":0.57,"macronutrients":"macronutrients 1","date":"2024-02-03T23:25:47.421Z","id":22},{"mealId":2,"customerId":2,"foodItem":"foodItem 2","quantity":0.65,"calories":0.02,"macronutrients":"macronutrients 2","date":"2023-12-17T03:39:45.297Z","id":32},{"mealId":3,"customerId":3,"foodItem":"foodItem 3","quantity":0.19,"calories":0.89,"macronutrients":"macronutrients 3","date":"2023-12-13T08:15:24.464Z","id":24},{"mealId":4,"customerId":4,"foodItem":"foodItem 4","quantity":0.91,"calories":0.37,"macronutrients":"macronutrients 4","date":"2024-01-08T05:09:34.337Z","id":61},{"mealId":5,"customerId":5,"foodItem":"foodItem 5","quantity":0.32,"calories":0.87,"macronutrients":"macronutrients 5","date":"2025-02-04T23:04:08.545Z","id":65}],"HealthMetrics":[{"metricId":1,"customerId":1,"type":"type 1","value":0.54,"unit":"unit 1","date":"2023-08-01T08:37:38.738Z","id":98},{"metricId":2,"customerId":2,"type":"type 2","value":0.29,"unit":"unit 2","date":"2025-02-19T07:37:04.144Z","id":44},{"metricId":3,"customerId":3,"type":"type 3","value":0.6,"unit":"unit 3","date":"2025-01-03T20:15:44.186Z","id":95},{"metricId":4,"customerId":4,"type":"type 4","value":0.27,"unit":"unit 4","date":"2024-07-20T02:54:57.055Z","id":10},{"metricId":5,"customerId":5,"type":"type 5","value":0,"unit":"unit 5","date":"2023-05-29T16:54:09.052Z","id":55}],"Notifications":[{"notificationId":1,"customerId":1,"type":"type 1","message":"message 1","dateScheduled":"2024-07-26T14:04:46.692Z","status":"status 1","id":96},{"notificationId":2,"customerId":2,"type":"type 2","message":"message 2","dateScheduled":"2024-09-27T06:45:06.077Z","status":"status 2","id":81},{"notificationId":3,"customerId":3,"type":"type 3","message":"message 3","dateScheduled":"2023-09-11T02:26:16.683Z","status":"status 3","id":31},{"notificationId":4,"customerId":4,"type":"type 4","message":"message 4","dateScheduled":"2023-04-10T14:37:47.198Z","status":"status 4","id":54},{"notificationId":5,"customerId":5,"type":"type 5","message":"message 5","dateScheduled":"2023-03-14T01:38:30.251Z","status":"status 5","id":76}],"SupportTickets":[{"ticketId":1,"userId":1,"customerId":1,"description":"description 1","status":"status 1","creationDate":"2023-09-23T22:54:27.953Z","resolutionDate":"2025-01-10T02:24:33.830Z","id":39},{"ticketId":2,"userId":2,"customerId":2,"description":"description 2","status":"status 2","creationDate":"2024-01-16T10:19:17.828Z","resolutionDate":"2023-12-05T17:15:41.189Z","id":25},{"ticketId":3,"userId":3,"customerId":3,"description":"description 3","status":"status 3","creationDate":"2024-02-07T23:22:51.356Z","resolutionDate":"2025-02-03T19:04:43.157Z","id":99},{"ticketId":4,"userId":4,"customerId":4,"description":"description 4","status":"status 4","creationDate":"2024-06-21T07:42:09.359Z","resolutionDate":"2023-09-27T09:47:33.284Z","id":52},{"ticketId":5,"userId":5,"customerId":5,"description":"description 5","status":"status 5","creationDate":"2024-06-27T02:14:12.229Z","resolutionDate":"2024-08-16T22:44:05.001Z","id":59}]};
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true){
      console.log('   Seeding database...');
      await this.SeedResource("UsersEntity", data.Users);
await this.SeedResource("CustomersEntity", data.Customers);
await this.SeedResource("WorkoutsEntity", data.Workouts);
await this.SeedResource("NutritionEntity", data.Nutrition);
await this.SeedResource("HealthMetricsEntity", data.HealthMetrics);
await this.SeedResource("NotificationsEntity", data.Notifications);
await this.SeedResource("SupportTicketsEntity", data.SupportTickets); 
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    }else{
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table '+resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}

